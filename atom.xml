<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZigZagK的博客</title>
  
  <subtitle>Never give up fighting!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-25T06:52:26.287Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZigZagK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello Hexo!</title>
    <link href="http://yoursite.com/2019/07/25/Hello%20Hexo/"/>
    <id>http://yoursite.com/2019/07/25/Hello Hexo/</id>
    <published>2019-07-25T06:33:00.000Z</published>
    <updated>2019-07-25T06:52:26.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哈哈">哈哈</h2><p><span class="math inline">\(dis\{i\}=dis\{ {sum_{i=1}^{n} }\}\)</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;哈哈&quot;&gt;哈哈&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(dis\{i\}=dis\{ {sum_{i=1}^{n} }\}\)&lt;/span&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="自己的理解" scheme="http://yoursite.com/tags/%E8%87%AA%E5%B7%B1%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>ZJOI2018爆炸记</title>
    <link href="http://yoursite.com/2018/04/26/ZJOI2018AFO/"/>
    <id>http://yoursite.com/2018/04/26/ZJOI2018AFO/</id>
    <published>2018-04-26T10:27:00.000Z</published>
    <updated>2019-07-25T05:49:02.527Z</updated>
    
    <content type="html"><![CDATA[<p>看来我和去年相比完全没有什么长进Orz。</p><a id="more"></a><h2 id="day1">Day1</h2><p>一试放在本校日神仙，Manchery学长演讲好评。听课的时候发现自己和去年比好像没有什么长进。</p><p>Day1点开试卷发现自己跟去年就是完全没有什么长进。T1写了大众分，T2写了大众分，T3爆零被巨佬们甩开一大截。</p><p>20+10+0=30。Day1爆炸预退役。</p><h2 id="day2">Day2</h2><p>二试又在余姚日神仙，mjy学姐讲课好评。听课的时候发现自己马上就要退役了。</p><p>第二天下午是高校宣传，我神志不清留下了，简陋地记了一下<a href="/2018/04/26/ZJOI2018AFO/#附录">招生条件</a>发现自己没书读了。</p><p>Day2点开试卷发现自己真的就是要退役了。T1写了阶乘爆枚，T2写了白痴暴力，T3全世界都写了 <span class="math inline">\(n=3\)</span> 的特判就我输出了一个 <span class="math inline">\(0\)</span> 。</p><p>20+20+0=40。Day2爆炸退役苟文化课。</p><h3 id="附录">附录</h3><p>浙大：NOI铜牌以上降一本，NOIP1= <span class="math inline">\(\to\)</span> 自主招生。(我没戏)</p><p>浙工大：NOIP2= <span class="math inline">\(\to\)</span> 面试，5A+其他C及以上+NOIP3 or 8A+其他C及以上= <span class="math inline">\(\to\)</span> 自主招生？三位一体？（没听清楚）。（我也没戏）</p><p>杭电：<del>HDU很棒棒&amp;革命友谊&amp;革命友谊的升华(LOVE)</del>NOIP3= <span class="math inline">\(\to\)</span> 免笔试。（我还没戏）</p><p>浙大城市学院(?)：可以<del>咸鱼(我)翻身(不可能)</del>转入浙大(??)。（我仍没戏）</p><p>国科大：自主招生优先考虑(???)。（我就没戏）</p><p><span style="color:gold;">清华大学</span>：竞赛成绩好+文化课成绩不差。（我真没戏）</p><p><span style="color:silver;">北京大学</span>：竞赛成绩好+文化课成绩不差。（我全没戏）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看来我和去年相比完全没有什么长进Orz。&lt;/p&gt;
    
    </summary>
    
      <category term="杂" scheme="http://yoursite.com/categories/%E6%9D%82/"/>
    
      <category term="游记" scheme="http://yoursite.com/categories/%E6%9D%82/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="自己的理解" scheme="http://yoursite.com/tags/%E8%87%AA%E5%B7%B1%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[折半搜索]TopCoder【EllysRPS】题解</title>
    <link href="http://yoursite.com/2018/04/24/TopCoderEllysRPS/"/>
    <id>http://yoursite.com/2018/04/24/TopCoderEllysRPS/</id>
    <published>2018-04-24T08:52:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>你要跟一共 <span class="math inline">\(m\)</span> 个人玩剪刀石头布的游戏，其中 R(Rock) 胜 S(Scissors)、S(Scissors) 胜 P(Paper)、P(Paper) 胜 R(Rock)。如果出同样的算平局。你与一个人共玩 <span class="math inline">\(n\)</span> 局，胜的 局数多的人胜出，如果胜的局数相同就打成平手。你现在知道了这 <span class="math inline">\(m\)</span> 个人在每局分别会出什么，你想要确定一个出拳的序列，使得在与 这 <span class="math inline">\(m\)</span> 个人的游戏中都能打成平手。输出满足条件的序列数。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p><span class="math inline">\(O(3^{n}m)\)</span> 会炸掉，然后我们就会发现折半搜索就行了……效率 <span class="math inline">\(O(3^{n\over 2}m)\)</span> 。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">20</span>,maxm=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> fl[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;<span class="comment">//0 R|1 P|2 S</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EllysRPS</span>&#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; a;<span class="keyword">int</span> n,m;LL ans;<span class="keyword">int</span> ID[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;<span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; ha;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L&gt;R) &#123;f&gt;<span class="number">0</span>?ha[now]++:ans+=(LL)ha[now];<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) now[j]+=f*fl[i][ID[(<span class="keyword">int</span>)a[j][L]]];</span><br><span class="line">Dfs(L+<span class="number">1</span>,R,f);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) now[j]-=f*fl[i][ID[(<span class="keyword">int</span>)a[j][L]]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">LL <span class="title">getCount</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s)</span></span>&#123;</span><br><span class="line">a=s;m=a.size();n=a[<span class="number">0</span>].length();ID[(<span class="keyword">int</span>)<span class="string">'R'</span>]=<span class="number">0</span>;ID[(<span class="keyword">int</span>)<span class="string">'P'</span>]=<span class="number">1</span>;ID[(<span class="keyword">int</span>)<span class="string">'S'</span>]=<span class="number">2</span>;</span><br><span class="line">ans=<span class="number">0</span>;now.resize(m);Dfs(<span class="number">0</span>,n/<span class="number">2</span><span class="number">-1</span>,<span class="number">1</span>);Dfs(n/<span class="number">2</span>,n<span class="number">-1</span>,<span class="number">-1</span>);<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;你要跟一共 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 个人玩剪刀石头布的游戏，其中 R(Rock) 胜 S(Scissors)、S(Scissors) 胜 P(Paper)、P(Paper) 胜 R(Rock)。如果出同样的算平局。你与一个人共玩 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 局，胜的 局数多的人胜出，如果胜的局数相同就打成平手。你现在知道了这 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 个人在每局分别会出什么，你想要确定一个出拳的序列，使得在与 这 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 个人的游戏中都能打成平手。输出满足条件的序列数。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="TopCoder" scheme="http://yoursite.com/categories/Online-Judge/TopCoder/"/>
    
    
      <category term="折半搜索" scheme="http://yoursite.com/tags/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo用Leancloud实现阅读量和评论数的统计与排序</title>
    <link href="http://yoursite.com/2018/04/21/HexoLeancloud/"/>
    <id>http://yoursite.com/2018/04/21/HexoLeancloud/</id>
    <published>2018-04-21T08:44:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>自我感觉Leancloud非常好用啊XD！</p><a id="more"></a><h2 id="阅读量统计">阅读量统计</h2><p>Hexo想实现博客阅读量统计需要借助统计网站，Leancloud是比较不错的选择。</p><p>在你的应用里创建名为"Counter"的Class，注意权限要给成无限制（所以一定要设置Web安全域名！）。</p><p>以yilia为例，在<code>after-footer.ejs</code>里添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;%- theme.js_cdn.jquery %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;%- theme.js_cdn.av %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span> </span><br><span class="line"><span class="xml">if(<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.enable</span> %&gt;</span>)&#123;</span></span><br><span class="line"><span class="xml">    var leancloud_app_id  = '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.app_id</span> %&gt;</span>';</span></span><br><span class="line"><span class="xml">    var leancloud_app_key = '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.app_key</span> %&gt;</span>';</span></span><br><span class="line">    AV.init(&#123;</span><br><span class="line">        appId: leancloud_app_id,</span><br><span class="line">        appKey: leancloud_app_key</span><br><span class="line">    &#125;);</span><br><span class="line">    var pageViewsLength = $(".pageViews").length;</span><br><span class="line">    var isIndex = $("#page-nav").length &gt; 0 ?true:false;</span><br><span class="line">    function showTime() &#123;</span><br><span class="line">        var Counter = AV.Object.extend("Counter");</span><br><span class="line">        if(isIndex)&#123;</span><br><span class="line">            $(".pageViews").each(function()&#123;</span><br><span class="line">                showPageViewsNum($(this),Counter);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            addPageViewsNum($(".pageViews"));</span><br><span class="line">            showPageViewsNum($(".pageViews"),Counter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function showPageViewsNum(ele,Counter)&#123;</span><br><span class="line">        var query = new AV.Query("Counter");</span><br><span class="line">        var url = ele.attr('id').trim();</span><br><span class="line">        query.equalTo("words",url);</span><br><span class="line">        query.find().then(function(results)&#123;</span><br><span class="line">        if (results.length&gt;0) $(document.getElementById(url)).text(results[0].get("views"));</span><br><span class="line">        else $(document.getElementById(url)).text('0');</span><br><span class="line">        &#125;,function(error)&#123;$(document.getElementById(url)).text('0');&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    function addPageViewsNum(ele)&#123;</span><br><span class="line">        var url = ele.attr('id').trim();var title = $('.article-title').text().trim();</span><br><span class="line">        var Counter = AV.Object.extend("Counter");</span><br><span class="line">        var now=new AV.Query(Counter);now.equalTo("words",url);</span><br><span class="line">        now.find().then(function(results)&#123;</span><br><span class="line">            if (results.length&gt;0)&#123;</span><br><span class="line">                var query=results[0];</span><br><span class="line">                query.increment("views");</span><br><span class="line">                query.fetchWhenSave(true);</span><br><span class="line">                query.save();</span><br><span class="line">            &#125; else&#123;</span><br><span class="line">                var query = new Counter;</span><br><span class="line">                query.set("words",url);</span><br><span class="line">                query.set("title",title);</span><br><span class="line">                query.set("views",1);</span><br><span class="line">                query.save(null,&#123;&#125;).then(function (object) &#123;&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,function(error)&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(pageViewsLength)&#123;</span><br><span class="line">        showTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>差不多就是检查这篇文章有没有被访问过，有的话直接更新原来的信息，将<code>views</code>加一，否则创建新的信息。</p><p>显示阅读量的话，根据你提供的<code>url</code>来获取到对应的信息，得到<code>views</code>，然后用js更改网页上的指定位置。在<code>article.ejs</code>的合适位置添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;"</span> <span class="attr">class</span>=<span class="string">"pageViews"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，还需要在<code>_config.yml</code>里添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">你的ID</span> </span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">你的KEY</span></span><br><span class="line"></span><br><span class="line"><span class="attr">js_cdn:</span></span><br><span class="line"><span class="attr">  jquery:</span> <span class="attr">https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js</span></span><br><span class="line">  <span class="string">av</span> <span class="string">:</span> <span class="string">//cdn1.lncld.net/static/js/2.5.0/av-min.js</span></span><br></pre></td></tr></table></figure><blockquote><p>题外话：原先阅读量采用的是一次加一条信息的方法，但是直到星期四学弟们集体写vbs“攻击”了我的博客……上千条信息我TM根本没法删……现在这种方法就可以直接改<code>views</code>，相对来说方便很多。</p></blockquote><h2 id="阅读量排行">阅读量排行</h2><p>因为信息中存了<code>views</code>，而且Leancloud自带很多有用的操作，所以我们可以实现阅读量排行！</p><p>首先在你想显示的地方加上<code>&lt;ul class="HotArticle"&gt;&lt;/ul&gt;</code>用来得到排行列表，<code>class</code>可以随便给（但是最好不要和其他<code>class</code>一样，不然可能会出锅QAQ）。</p><p>然后在<code>after-footer.ejs</code>里添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="xml">    var leancloud_app_id  = '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.app_id</span> %&gt;</span>';</span></span><br><span class="line"><span class="xml">    var leancloud_app_key = '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.app_key</span> %&gt;</span>';</span></span><br><span class="line">    AV.init(&#123;</span><br><span class="line">        appId: lealeancloud_app_keyncloud_app_id,</span><br><span class="line">        appKey: leancloud_app_key</span><br><span class="line">    &#125;);</span><br><span class="line">    var Counter=AV.Object.extend("Counter");var query=new AV.Query(Counter);</span><br><span class="line">    query.descending("views");query.limit(10); </span><br><span class="line">    query.find().then(function(results)&#123;</span><br><span class="line">        for(var i=0;i&lt;results.length;i++)&#123;</span><br><span class="line">            var counter=results[i];</span><br><span class="line">            var title=counter.get("title");</span><br><span class="line">            var url=counter.get("words");</span><br><span class="line">            var views=counter.get("views");</span><br><span class="line"><span class="xml">            $('.HotArticle').append('<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"'+url+'"</span>&gt;</span>'+title+'<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>'+views+'<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>');</span></span><br><span class="line">            //$('.class')中的class一定要和上面的class一样</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,function(error)&#123;&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不难看出这就是调用了Leancloud自带的排序，然后输出到排行列表里。最后改一下排行列表的样式就行了~~~</p><h2 id="评论数统计">评论数统计</h2><p>Emm……这个有些复杂，但并不是很难实现。</p><p>首先你要使用<a href="https://panjunwen.com/diy-a-comment-system/" target="_blank" rel="noopener">Valine评论系统</a>，是借助Leancloud实现的，跟着链接里说的做就行了。</p><blockquote><p>题外话：Valine要实现邮箱提醒功能，一定要使用链接里Dalao给出的Valine.min.js<del>（或者你可以自己写）</del>。</p></blockquote><p>随便发几条评论，到Leancloud里查看，会发现储存下来的信息中有一个<code>url</code>记录了文章链接，用这个就可以搞事情了！</p><p>在<code>after-footer.ejs</code>里添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span> </span><br><span class="line"><span class="xml">if(<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.enable</span> %&gt;</span>)&#123;</span></span><br><span class="line"><span class="xml">    var leancloud_app_id  = '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.app_id</span> %&gt;</span>';</span></span><br><span class="line"><span class="xml">    var leancloud_app_key = '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.app_key</span> %&gt;</span>';</span></span><br><span class="line">    AV.init(&#123;</span><br><span class="line">        appId: leancloud_app_id,</span><br><span class="line">        appKey: leancloud_app_key</span><br><span class="line">    &#125;);</span><br><span class="line">    var commentCountLength = $(".commentCount").length;</span><br><span class="line">    var isIndex = $(".commentCount").length &gt; 1 ?true:false;</span><br><span class="line">    function showCount() &#123;</span><br><span class="line">        var Comment = AV.Object.extend("Comment");</span><br><span class="line">        if(isIndex)&#123;</span><br><span class="line">            $(".commentCount").each(function()&#123;</span><br><span class="line">                showcommentCountNum($(this),Comment);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            showcommentCountNum($(".commentCount"),Comment);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function showcommentCountNum(ele,Comment)&#123;</span><br><span class="line">        var query = new AV.Query("Comment");</span><br><span class="line">        var key = ele.attr('id').trim();var url = key.substring(0,key.length-12);</span><br><span class="line">            query.equalTo("url", url);</span><br><span class="line">            query.count().then(function (number) &#123;</span><br><span class="line">                $(document.getElementById(key)).text(number?  number : '0');</span><br><span class="line">            &#125;, function (error) &#123;</span><br><span class="line">                $(document.getElementById(key)).text('0');</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(commentCountLength)&#123;</span><br><span class="line">        showCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码可能有些奇怪，不要在意QAQ。原理差不多就是统计出信息中<code>url</code>为当前文章链接的信息数量。</p><p>在<code>article.ejs</code>的合适位置添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;commentCount"</span> <span class="attr">class</span>=<span class="string">"commentCount"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="最近评论">最近评论</h2><p>和阅读量排行差不多啦，每条信息都会有个创建时间<code>createdAt</code>，按照这个排序之后取前若干个就行了。</p><p>先在要显示的地方添加<code>&lt;ul class="LatestComment"&gt;&lt;/ul&gt;</code>，然后在<code>after-footer.ejs</code>中添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="xml">    var leancloud_app_id  = '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.app_id</span> %&gt;</span>';</span></span><br><span class="line"><span class="xml">    var leancloud_app_key = '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.leancloud_visitors.app_key</span> %&gt;</span>';</span></span><br><span class="line">    AV.init(&#123;</span><br><span class="line">        appId: leancloud_app_id,</span><br><span class="line">        appKey: leancloud_app_key</span><br><span class="line">    &#125;);</span><br><span class="line">    var Comment=AV.Object.extend("Comment");</span><br><span class="line">    var query=new AV.Query(Comment);</span><br><span class="line">    query.descending("createdAt");query.limit(5);</span><br><span class="line">    query.find().then(function(results)&#123;</span><br><span class="line">        for(var i=0;i&lt;results.length;i++)&#123;</span><br><span class="line">            var comment=results[i];</span><br><span class="line">            var nick=comment.get("nick");</span><br><span class="line">            var link=comment.get("link");</span><br><span class="line">            var url=comment.get("url");</span><br><span class="line">            var words=comment.get("comment");</span><br><span class="line">            var time=comment.get("createdAt").toLocaleString();</span><br><span class="line"><span class="xml">            $('.LatestComment').append('<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"'+link+'"</span>&gt;</span>'+nick+'<span class="tag">&lt;/<span class="name">a</span>&gt;</span>在<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"'+url+'#lv-container"</span>&gt;</span>'+time+'<span class="tag">&lt;/<span class="name">a</span>&gt;</span>发表：<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>'+words+'<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>');</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,function(error)&#123;&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果">效果</h2><p>阅读量和评论数统计：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>阅读排行和最近评论：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="参考">参考</h2><ul><li>看了<a href="http://www.cnblogs.com/stringfade/p/7738072.html" target="_blank" rel="noopener">添加 hexo yilia 主题的文章阅读量</a>和<a href="http://crescentmoon.info/2014/12/11/popular-widget/" target="_blank" rel="noopener">使用LeanCloud平台为Hexo博客添加文章浏览量统计组件</a>的代码之后魔改出了自己的代码XD。</li><li><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine评论系统</a></li><li><a href="https://panjunwen.com/diy-a-comment-system/" target="_blank" rel="noopener">Valine: 独立博客评论系统</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自我感觉Leancloud非常好用啊XD！&lt;/p&gt;
    
    </summary>
    
      <category term="杂" scheme="http://yoursite.com/categories/%E6%9D%82/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/%E6%9D%82/Hexo/"/>
    
    
      <category term="自己的理解" scheme="http://yoursite.com/tags/%E8%87%AA%E5%B7%B1%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[二分+上下界费用流]HDU5263【平衡大师】题解</title>
    <link href="http://yoursite.com/2018/04/19/HDU5263/"/>
    <id>http://yoursite.com/2018/04/19/HDU5263/</id>
    <published>2018-04-19T08:03:00.000Z</published>
    <updated>2019-07-25T06:33:40.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有 <span class="math inline">\(n\)</span> 个点 <span class="math inline">\(m\)</span> 条单向边，每个点的不平衡度为出度减入度的差的绝对值，现在可以删除至多 <span class="math inline">\(m-K\)</span> 条边，求最大不平衡度的最小值。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>其实不难吧……只是水平限制了我的想象力……首先二分答案 <span class="math inline">\(D\)</span> ，令 <span class="math inline">\(d_i\)</span> 表示 <span class="math inline">\(i\)</span> 点的入度 <span class="math inline">\(-\)</span> 出度，对于一条单向边 <span class="math inline">\((x,y)\)</span> 我们连 <span class="math inline">\(x\to y\)</span> 上界为 <span class="math inline">\(1\)</span> 的边，如果 <span class="math inline">\((x,y)\)</span> 满载说明这条边被删。然后对于 <span class="math inline">\(d_i\)</span> 分类讨论一下：</p><ol type="1"><li><span class="math inline">\(d_i\ge D\)</span> ，那么至少要减掉 <span class="math inline">\(d_i-D\)</span> 的出度，所以连 <span class="math inline">\(i\to T\)</span> 下界为 <span class="math inline">\(d_i-D\)</span> 的边，但是又不能减爆，所以上界为 <span class="math inline">\(d_i+D\)</span> 。</li><li><span class="math inline">\(-D&lt;d_i&lt;D\)</span> ，可加可减，连 <span class="math inline">\(S\to i\)</span> 上界为 <span class="math inline">\(D-d_i\)</span> ，连 <span class="math inline">\(i\to T\)</span> 上界为 <span class="math inline">\(d_i+D\)</span> 的边。</li><li><span class="math inline">\(d_i\le -D\)</span> ，连 <span class="math inline">\(S\to i\)</span> 下界为 <span class="math inline">\(-D-d_i\)</span> ，上界为 <span class="math inline">\(D-d_i\)</span> 的边。</li></ol><p>原本我以为直接刷上下界最小流就行了，然后疯狂WA，之后发现这样会出现一种违规的情况：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-0.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>你看下面那种 <span class="math inline">\(x\)</span> 通过 <span class="math inline">\(y\)</span> 间接向 <span class="math inline">\(z\)</span> 提供流了啊，这并不符合我们的要求啊QAQ！！！</p><p>所以我们再引入费用，对于单向边 <span class="math inline">\((x,y)\)</span> 连上界为 <span class="math inline">\(1\)</span> 费用为 <span class="math inline">\(1\)</span> 的边，其他边的费用为 <span class="math inline">\(0\)</span> 。这样的话显然会采取上面那种方法，从而防止下面错误的方法出现。</p><p>上下界费用流？我不会啊！其实就和<a href="https://blog.csdn.net/zzkksunboy/article/details/76038998" target="_blank" rel="noopener">上下界网络流</a>一样……只不过换成了费用流……</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">52</span>,maxm=maxn*maxn,maxe=(maxm+<span class="number">2</span>*maxn)&lt;&lt;<span class="number">1</span>,INF=<span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> te,n,S,T,SS,TT,m,K,x[maxm+<span class="number">5</span>],y[maxm+<span class="number">5</span>],d[maxn+<span class="number">5</span>],num[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> E,lnk[maxn+<span class="number">5</span>],son[maxe+<span class="number">5</span>],nxt[maxe+<span class="number">5</span>],w[maxe+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> que[maxn+<span class="number">5</span>],ti,vis[maxn+<span class="number">5</span>],dis[maxn+<span class="number">5</span>],MIN[maxn+<span class="number">5</span>];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; e[maxe+<span class="number">5</span>];<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; ID;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">son[E]=y;w[E]=c;e[E]=mp(<span class="number">0</span>,R-L);nxt[E]=lnk[x];lnk[x]=E++;</span><br><span class="line">        son[E]=x;w[E]=-c;e[E]=mp(<span class="number">0</span>,<span class="number">0</span>);nxt[E]=lnk[y];lnk[y]=E++;</span><br><span class="line">num[x]-=L;num[y]+=L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AM(x) ((x)&lt;maxn?((x)+1):0)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> &amp;MC,<span class="keyword">int</span> &amp;MF)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fa[maxn+<span class="number">5</span>],pre[maxn+<span class="number">5</span>];<span class="built_in">memset</span>(dis,<span class="number">63</span>,<span class="keyword">sizeof</span>(dis));MIN[t]=INF;</span><br><span class="line"><span class="keyword">int</span> Head=<span class="number">0</span>,Tail=<span class="number">0</span>;que[++Tail]=s;vis[s]=++ti;dis[s]=<span class="number">0</span>;MIN[s]=INF;</span><br><span class="line"><span class="keyword">while</span> (Head!=Tail)&#123;</span><br><span class="line"><span class="keyword">int</span> x=que[Head=AM(Head)];vis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x],u;~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (e[j].fr&lt;e[j].sc&amp;&amp;dis[x]+w[j]&lt;dis[u=son[j]])&#123;</span><br><span class="line">dis[u]=dis[x]+w[j];MIN[u]=min(MIN[x],e[j].sc-e[j].fr);</span><br><span class="line">fa[u]=x;pre[u]=j;<span class="keyword">if</span> (vis[u]&lt;ti) que[Tail=AM(Tail)]=u,vis[u]=ti;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (MIN[t]==INF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=t,j=pre[x];x!=s;x=fa[x],j=pre[x])</span><br><span class="line">e[j].fr+=MIN[t],e[j^<span class="number">1</span>].fr-=MIN[t];</span><br><span class="line"><span class="keyword">return</span> MC+=dis[t]*MIN[t],MF+=MIN[t],<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">MCMF</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> &amp;MC)</span> </span>&#123;<span class="keyword">int</span> MF=<span class="number">0</span>;<span class="keyword">while</span> (Spfa(s,t,MC,MF));<span class="keyword">return</span> MF;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> D)</span></span>&#123;</span><br><span class="line">E=<span class="number">0</span>;<span class="built_in">memset</span>(lnk,<span class="number">255</span>,<span class="keyword">sizeof</span>(lnk));<span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">int</span> ful=<span class="number">0</span>;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) Add(x[i],y[i],<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (d[i]&gt;=D) Add(i,T,d[i]-D,d[i]+D,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (d[i]&lt;=-D) Add(S,i,-d[i]-D,-d[i]+D,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> Add(S,i,<span class="number">0</span>,D-d[i],<span class="number">0</span>),Add(i,T,<span class="number">0</span>,d[i]+D,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=S;i&lt;=T;i++)</span><br><span class="line"><span class="keyword">if</span> (num[i]&gt;<span class="number">0</span>) Add(SS,i,<span class="number">0</span>,num[i],<span class="number">0</span>),ful+=num[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num[i]&lt;<span class="number">0</span>) Add(i,TT,<span class="number">0</span>,-num[i],<span class="number">0</span>);</span><br><span class="line">Add(T,S,<span class="number">0</span>,INF,<span class="number">0</span>);<span class="keyword">int</span> ans=<span class="number">0</span>,MAX=<span class="number">0</span>;<span class="keyword">if</span> (MCMF(SS,TT,ans)&lt;ful) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[SS];~j;j=nxt[j]) e[j].fr=e[j].sc,e[j^<span class="number">1</span>].fr=e[j^<span class="number">1</span>].sc;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[TT];~j;j=nxt[j]) e[j].fr=e[j].sc,e[j^<span class="number">1</span>].fr=e[j^<span class="number">1</span>].sc;</span><br><span class="line">e[E<span class="number">-1</span>].fr=e[E<span class="number">-1</span>].sc;e[E<span class="number">-2</span>].fr=e[E<span class="number">-2</span>].sc;<span class="keyword">return</span> MCMF(T,S,MAX),ans-MAX&lt;=K;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t=(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;te),<span class="number">1</span>);t&lt;=te;t++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;K);K=m-K;<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));ID.clear();</span><br><span class="line">S=<span class="number">0</span>;T=n+<span class="number">1</span>;SS=T+<span class="number">1</span>;TT=SS+<span class="number">1</span>;<span class="keyword">int</span> tot=<span class="number">0</span>;<span class="keyword">char</span> s[<span class="number">25</span>];<span class="built_in">string</span> now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);d[x[i]=ID.count(now=<span class="built_in">string</span>(s))?ID[now]:ID[now]=++tot]--;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);d[y[i]=ID.count(now=<span class="built_in">string</span>(s))?ID[now]:ID[now]=++tot]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L=<span class="number">0</span>,R=n,mid;<span class="keyword">while</span> (L&lt;=R) check(mid=L+(R-L&gt;&gt;<span class="number">1</span>))?R=mid<span class="number">-1</span>:L=mid+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d:\n%d\n"</span>,t,L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个点 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 条单向边，每个点的不平衡度为出度减入度的差的绝对值，现在可以删除至多 &lt;span class=&quot;math inline&quot;&gt;\(m-K\)&lt;/span&gt; 条边，求最大不平衡度的最小值。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="HDU" scheme="http://yoursite.com/categories/Online-Judge/HDU/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[树形DP+two-pointer]2016计蒜之道初赛第六场【微软的员工福利】题解</title>
    <link href="http://yoursite.com/2018/04/17/jisuanke11148/"/>
    <id>http://yoursite.com/2018/04/17/jisuanke11148/</id>
    <published>2018-04-17T13:00:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有 <span class="math inline">\(n\)</span> 个ZZK给JZ打工，他们的上下级关系是一棵树。现在JZ要给蒟蒻ZZK输送一定的神犇之力，每个ZZK可以得到 <span class="math inline">\(r_i\)</span> 点神犇之力或者 <span class="math inline">\(p_i\)</span> 点神犇之力。但是在ZZK得到神犇之力的同时会嫉妒直接下属ZZK得到的神犇之力，嫉妒会使得神犇之力削弱 <span class="math inline">\(\lceil{x\over 1000}\rceil\times 666i\)</span> ，其中 <span class="math inline">\(x\)</span> 是 <span class="math inline">\(i\)</span> 直接下属的神犇之力（不考虑嫉妒）的极差，求 <span class="math inline">\(n\)</span> 个ZZK获得神犇之力的和的最大值。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>显然极差 <span class="math inline">\(1000\)</span> 分一段，所以可以直接枚举极差，然后树形DP+two-pointer一下就行了。</p><p>颓太久了调代码能力下降，各种错误调了一个晚上。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,v[maxn+<span class="number">5</span>][<span class="number">2</span>];LL f[maxn+<span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> E,lnk[maxn+<span class="number">5</span>],nxt[(maxn&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>],son[(maxn&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> now,ha[maxn+<span class="number">5</span>];pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; w[(maxn&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Add(x,y) son[++E]=(y),nxt[E]=lnk[x],lnk[x]=E</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ID</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> A=L&lt;=v[x][<span class="number">0</span>]&amp;&amp;v[x][<span class="number">0</span>]&lt;=R,B=L&lt;=v[x][<span class="number">1</span>]&amp;&amp;v[x][<span class="number">1</span>]&lt;=R;</span><br><span class="line"><span class="keyword">if</span> (A&amp;&amp;B) <span class="keyword">return</span> <span class="number">3</span>;<span class="keyword">if</span> (A) <span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">if</span> (B) <span class="keyword">return</span> <span class="number">2</span>;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j]) <span class="keyword">if</span> (son[j]!=pre) DP(son[j],x);now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (son[j]!=pre) w[++now]=mp(v[son[j]][<span class="number">0</span>],son[j]),w[++now]=mp(v[son[j]][<span class="number">1</span>],son[j]);</span><br><span class="line"><span class="keyword">if</span> (!now) &#123;f[x][<span class="number">0</span>]=v[x][<span class="number">0</span>];f[x][<span class="number">1</span>]=v[x][<span class="number">1</span>];<span class="keyword">return</span>;&#125;</span><br><span class="line">w[++now]=mp(v[x][<span class="number">0</span>],x);w[++now]=mp(v[x][<span class="number">1</span>],x);</span><br><span class="line">sort(w+<span class="number">1</span>,w+<span class="number">1</span>+now);LL MAX[<span class="number">2</span>];MAX[<span class="number">0</span>]=MAX[<span class="number">1</span>]=f[<span class="number">0</span>][<span class="number">0</span>]<span class="number">-1e18</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> D=<span class="number">0</span>;D&lt;=w[now].fr-w[<span class="number">1</span>].fr+<span class="number">1000</span>;D+=<span class="number">1000</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;LL sum=-(LL)D/<span class="number">1000</span>*<span class="number">666</span>*x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=now;i++) ha[w[i].sc]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>,k,L,R;i&lt;=now;i=k)&#123;</span><br><span class="line"><span class="keyword">if</span> (v[x][<span class="number">1</span>]&lt;w[i].fr) <span class="keyword">break</span>;L=w[i].fr;R=L+D;</span><br><span class="line"><span class="keyword">for</span> (;j&lt;=now&amp;&amp;w[j].fr&lt;=R;ha[w[j++].sc]++)</span><br><span class="line"><span class="keyword">if</span> (!ha[w[j].sc]) sum+=f[w[j].sc][ID(L,R,w[j].sc)==<span class="number">2</span>],tot++;</span><br><span class="line"><span class="keyword">else</span> sum+=max(f[w[j].sc][<span class="number">0</span>],f[w[j].sc][<span class="number">1</span>])-f[w[j].sc][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (tot==(now&gt;&gt;<span class="number">1</span>))&#123;</span><br><span class="line"><span class="keyword">int</span> tp=ID(L,R,x);</span><br><span class="line"><span class="keyword">if</span> (tp==<span class="number">1</span>||tp==<span class="number">3</span>) MAX[<span class="number">0</span>]=max(MAX[<span class="number">0</span>],sum+v[x][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (tp==<span class="number">2</span>||tp==<span class="number">3</span>) MAX[<span class="number">1</span>]=max(MAX[<span class="number">1</span>],sum+v[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (k=i;k&lt;=now&amp;&amp;w[i].fr==w[k].fr;ha[w[k++].sc]--)</span><br><span class="line"><span class="keyword">if</span> (ha[w[k].sc]==<span class="number">1</span>) sum-=f[w[k].sc][ID(L,R,w[k].sc)==<span class="number">2</span>],tot--;</span><br><span class="line"><span class="keyword">else</span> sum-=max(f[w[k].sc][<span class="number">0</span>],f[w[k].sc][<span class="number">1</span>])-f[w[k].sc][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">f[x][<span class="number">0</span>]=MAX[<span class="number">0</span>];f[x][<span class="number">1</span>]=MAX[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),<span class="number">1</span>);i&lt;=n;i++)</span><br><span class="line">&#123;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v[i][<span class="number">0</span>],&amp;v[i][<span class="number">1</span>]);<span class="keyword">if</span> (v[i][<span class="number">0</span>]&gt;v[i][<span class="number">1</span>]) swap(v[i][<span class="number">0</span>],v[i][<span class="number">1</span>]);&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y),Add(x,y),Add(y,x);</span><br><span class="line"><span class="keyword">return</span> DP(<span class="number">1</span>),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,max(f[<span class="number">1</span>][<span class="number">0</span>],f[<span class="number">1</span>][<span class="number">1</span>])),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个ZZK给JZ打工，他们的上下级关系是一棵树。现在JZ要给蒟蒻ZZK输送一定的神犇之力，每个ZZK可以得到 &lt;span class=&quot;math inline&quot;&gt;\(r_i\)&lt;/span&gt; 点神犇之力或者 &lt;span class=&quot;math inline&quot;&gt;\(p_i\)&lt;/span&gt; 点神犇之力。但是在ZZK得到神犇之力的同时会嫉妒直接下属ZZK得到的神犇之力，嫉妒会使得神犇之力削弱 &lt;span class=&quot;math inline&quot;&gt;\(\lceil{x\over 1000}\rceil\times 666i\)&lt;/span&gt; ，其中 &lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt; 是 &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt; 直接下属的神犇之力（不考虑嫉妒）的极差，求 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个ZZK获得神犇之力的和的最大值。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="计蒜客" scheme="http://yoursite.com/categories/Online-Judge/%E8%AE%A1%E8%92%9C%E5%AE%A2/"/>
    
    
      <category term="树形DP" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
      <category term="two-pointer" scheme="http://yoursite.com/tags/two-pointer/"/>
    
  </entry>
  
  <entry>
    <title>[最小割]TopCoder【FoxAndCity】题解</title>
    <link href="http://yoursite.com/2018/04/15/TopCoderFoxAndCity/"/>
    <id>http://yoursite.com/2018/04/15/TopCoderFoxAndCity/</id>
    <published>2018-04-15T12:50:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有 <span class="math inline">\(n\)</span> 个由双向边连通的城市，<span class="math inline">\(1\)</span> 号城市里住着神犇JZ。<span class="math inline">\(i\)</span> 号城市想要离JZ所在城市距离为 <span class="math inline">\(want_i\)</span> ，如果实际的距离为 <span class="math inline">\(real_i\)</span> ，那么就会有 <span class="math inline">\((want_i-real_i)^2\)</span> 的不满意度。求任意加边后最小的不满意度。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p><span class="math inline">\(n\)</span> 这么小……但显然不能DFS和状压DP，所以往网络流的方向想。</p><p>显然一个城市只能选择一个 <span class="math inline">\(real\)</span> ，所以和<a href="/2018/04/11/BZOJ3144/">切糕模型</a>一样，把城市按照距离拆点后串起来，边的容量为不满意度。</p><p>限制是什么？因为可以任意加边，所以距离不可能比初始距离小，那么就需要把超过初始距离的边的容量改为 <span class="math inline">\(INF\)</span> 。同时原先相邻的两个点距离之差不可能超过 <span class="math inline">\(1\)</span> ，因此按照切糕模型的套路连边即可。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">40</span>,maxt=maxn*maxn,maxm=(maxt+(maxt*maxn&lt;&lt;<span class="number">1</span>))&lt;&lt;<span class="number">1</span>,INF=<span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoxAndCity</span>&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID(x,y) (((x)-1)*n+(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="keyword">int</span> n,E,lnk[maxt+<span class="number">5</span>],son[maxm+<span class="number">5</span>],nxt[maxm+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> que[maxt+<span class="number">5</span>],dis[maxt+<span class="number">5</span>],ti,vis[maxt+<span class="number">5</span>],cur[maxt+<span class="number">5</span>];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; e[maxm+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">son[E]=y;e[E]=mp(<span class="number">0</span>,z);nxt[E]=lnk[x];lnk[x]=E++;</span><br><span class="line">son[E]=x;e[E]=mp(<span class="number">0</span>,<span class="number">0</span>);nxt[E]=lnk[y];lnk[y]=E++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Head=<span class="number">0</span>,Tail=<span class="number">0</span>;que[++Tail]=s;dis[s]=<span class="number">0</span>;vis[s]=++ti;</span><br><span class="line"><span class="keyword">while</span> (Head!=Tail)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=que[++Head],j=lnk[x],u;~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (vis[u=son[j]]&lt;ti&amp;&amp;e[j].fr&lt;e[j].sc) que[++Tail]=u,dis[u]=dis[x]+<span class="number">1</span>,vis[u]=ti;</span><br><span class="line"><span class="keyword">return</span> vis[t]==ti;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t,<span class="keyword">int</span> MIN=INF)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==t||!MIN) <span class="keyword">return</span> MIN;<span class="keyword">int</span> now,f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;j=cur[x];~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (dis[x]+<span class="number">1</span>==dis[son[j]]&amp;&amp;(now=Dfs(son[j],t,min(MIN,e[j].sc-e[j].fr))))&#123;</span><br><span class="line">e[j].fr+=now;e[j^<span class="number">1</span>].fr-=now;f+=now;</span><br><span class="line"><span class="keyword">if</span> (!(MIN-=now)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minimalCost</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; linked,<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; want)</span></span>&#123;</span><br><span class="line">n=linked[<span class="number">0</span>].size();<span class="keyword">int</span> S=<span class="number">0</span>,T=n*n+<span class="number">1</span>;E=<span class="number">0</span>;<span class="built_in">memset</span>(lnk,<span class="number">255</span>,<span class="keyword">sizeof</span>(lnk));</span><br><span class="line"><span class="keyword">int</span> Head=<span class="number">0</span>,Tail=<span class="number">0</span>;que[++Tail]=<span class="number">1</span>;dis[<span class="number">1</span>]=<span class="number">0</span>;vis[<span class="number">1</span>]=++ti;</span><br><span class="line"><span class="keyword">while</span> (Head!=Tail)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=que[++Head],j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span> (vis[j]&lt;ti&amp;&amp;linked[x<span class="number">-1</span>][j<span class="number">-1</span>]==<span class="string">'Y'</span>) que[++Tail]=j,dis[j]=dis[x]+<span class="number">1</span>,vis[j]=ti;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">Add(S,ID(i,<span class="number">1</span>),sqr(want[i<span class="number">-1</span>]<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=dis[i];j++) Add(ID(i,j<span class="number">-1</span>),ID(i,j),sqr(want[i<span class="number">-1</span>]-j));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=dis[i]+<span class="number">1</span>;j&lt;n;j++) Add(ID(i,j<span class="number">-1</span>),ID(i,j),INF);</span><br><span class="line">Add(ID(i,n<span class="number">-1</span>),T,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span> (linked[i<span class="number">-1</span>][j<span class="number">-1</span>]==<span class="string">'Y'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">if</span> (k&gt;<span class="number">2</span>) Add(ID(i,k<span class="number">-1</span>),ID(j,k<span class="number">-2</span>),INF);</span><br><span class="line"><span class="keyword">if</span> (k&lt;n) Add(ID(j,k+<span class="number">1</span>),ID(i,k),INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;<span class="keyword">while</span> (Bfs(S,T)) <span class="built_in">memcpy</span>(cur,lnk,<span class="keyword">sizeof</span>(lnk)),ans+=Dfs(S,T);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个由双向边连通的城市，&lt;span class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt; 号城市里住着神犇JZ。&lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt; 号城市想要离JZ所在城市距离为 &lt;span class=&quot;math inline&quot;&gt;\(want_i\)&lt;/span&gt; ，如果实际的距离为 &lt;span class=&quot;math inline&quot;&gt;\(real_i\)&lt;/span&gt; ，那么就会有 &lt;span class=&quot;math inline&quot;&gt;\((want_i-real_i)^2\)&lt;/span&gt; 的不满意度。求任意加边后最小的不满意度。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="TopCoder" scheme="http://yoursite.com/categories/Online-Judge/TopCoder/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>[TC交题指南]TopCoder【RangeEncoding】题解</title>
    <link href="http://yoursite.com/2018/04/15/TopCoderRangeEncoding/"/>
    <id>http://yoursite.com/2018/04/15/TopCoderRangeEncoding/</id>
    <published>2018-04-15T10:56:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>给出一个递增的数组，求 <span class="math inline">\(a_i=a_{i-1}+1\)</span> 的段数。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>TC交题方法比较鬼畜，不是读入输出，而是让你实现一个指定名称的<code>class</code>，里面写一个指定名称参数返回值的函数，然后按照题目的意思根据传入的参数返回答案。注意提交程序的时候不要带上调试用的<code>int main</code>。</p><p>等等，说好的题解呢？<span class="math inline">\(ans=\sum_{i=2}^{n}[a_{i-1}+1&lt;a_i]\)</span> ，完事。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RangeEncoding</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minRanges</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.size();i++) ans+=a[i<span class="number">-1</span>]+<span class="number">1</span>&lt;a[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;给出一个递增的数组，求 &lt;span class=&quot;math inline&quot;&gt;\(a_i=a_{i-1}+1\)&lt;/span&gt; 的段数。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="TopCoder" scheme="http://yoursite.com/categories/Online-Judge/TopCoder/"/>
    
    
      <category term="划水" scheme="http://yoursite.com/tags/%E5%88%92%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>[最小割]BZOJ3144(Hnoi2013)【切糕】题解</title>
    <link href="http://yoursite.com/2018/04/11/BZOJ3144/"/>
    <id>http://yoursite.com/2018/04/11/BZOJ3144/</id>
    <published>2018-04-11T15:22:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有一块 <span class="math inline">\(X\times Y\times Z\)</span> 的切糕，每个点 <span class="math inline">\((x,y,z)\)</span> 都有不和谐值 <span class="math inline">\(v(x,y,z)\)</span> 。现在要切这块切糕，为每个直线 <span class="math inline">\((x,y)\)</span> 选出一个点 <span class="math inline">\(z\)</span> ，一种切法的不和谐值为选出点的不和谐值之和，为了平整还需要满足两条相邻的直线选出的点距离不超过 <span class="math inline">\(D\)</span> 。求最小不和谐值。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>声名远扬(?)的切糕模型，如果没有距离限制，我们可以把每个 <span class="math inline">\((x,y)\)</span> 都从 <span class="math inline">\(S\)</span> 到 <span class="math inline">\(T\)</span> 串起来，像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S -&gt; 1 -&gt; 2 -&gt; 3 -&gt; ... -&gt; T</span><br></pre></td></tr></table></figure><p>将每条边的容量设置为不和谐值，然后求最小割就是最优解。</p><p>但是有限制，我们可以用容量为INF的边实现“屏蔽”效果，对于网络中的点 <span class="math inline">\((x,y,z)\)</span> ，在 <span class="math inline">\((x,y,z-1-D)\to (x&#39;,y&#39;,z-1)\)</span> 和 <span class="math inline">\((x&#39;,y&#39;,z+D)\to (x,y,z)\)</span> 之间（ <span class="math inline">\((x,y)\)</span> 与 <span class="math inline">\((x&#39;,y&#39;)\)</span> 相邻）连容量为INF的边，这样就会形成一个 <span class="math inline">\(S\to (x,y,z-1)\to (x&#39;,y&#39;,z-D)\to (x&#39;,y&#39;,z+D)\to (x,y,z)\to T\)</span> 的“通路”，从而阻止其他边被选。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">40</span>,maxt=maxn*maxn*maxn,maxe=(maxt+(maxt&lt;&lt;<span class="number">3</span>))&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> fl[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;,INF=<span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> X,Y,Z,D,n,ans;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; e[maxe+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> E,lnk[maxt+<span class="number">5</span>],son[maxe+<span class="number">5</span>],nxt[maxe+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> que[maxt+<span class="number">5</span>],dis[maxt+<span class="number">5</span>],ti,vis[maxt+<span class="number">5</span>],cur[maxt+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ID</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span> </span>&#123;<span class="keyword">if</span> (!z) <span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">return</span> z&lt;Z?(x<span class="number">-1</span>)*Y*Z+(y<span class="number">-1</span>)*Z+z:n+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">son[E]=y;e[E]=mp(<span class="number">0</span>,z);nxt[E]=lnk[x];lnk[x]=E++;</span><br><span class="line">son[E]=x;e[E]=mp(<span class="number">0</span>,<span class="number">0</span>);nxt[E]=lnk[y];lnk[y]=E++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Head=<span class="number">0</span>,Tail=<span class="number">0</span>;que[++Tail]=s;vis[s]=++ti;dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (Head!=Tail)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=que[++Head],j=lnk[x],u;~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (vis[u=son[j]]&lt;ti&amp;&amp;e[j].fr&lt;e[j].sc) que[++Tail]=u,vis[u]=ti,dis[u]=dis[x]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> vis[t]==ti;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t,<span class="keyword">int</span> MIN=INF)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==t||!MIN) <span class="keyword">return</span> MIN;<span class="keyword">int</span> f=<span class="number">0</span>,now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;j=cur[x];~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (dis[x]+<span class="number">1</span>==dis[son[j]]&amp;&amp;(now=Dfs(son[j],t,min(MIN,e[j].sc-e[j].fr))))&#123;</span><br><span class="line">e[j].fr+=now;e[j^<span class="number">1</span>].fr-=now;f+=now;</span><br><span class="line"><span class="keyword">if</span> (!(MIN-=now)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;X,&amp;Y,&amp;Z,&amp;D);n=X*Y*Z;E=<span class="number">0</span>;<span class="built_in">memset</span>(lnk,<span class="number">255</span>,<span class="keyword">sizeof</span>(lnk));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> z=<span class="number">1</span>;z&lt;=Z;z++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=X;x++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y=<span class="number">1</span>,val;y&lt;=Y;y++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val),Add(ID(x,y,z<span class="number">-1</span>),ID(x,y,z),val);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=X;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=Y;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> f=<span class="number">0</span>;f&lt;<span class="number">4</span>;f++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=i+fl[f][<span class="number">0</span>],y=j+fl[f][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">1</span>||x&gt;X||y&lt;<span class="number">1</span>||y&gt;Y) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Z;k++)&#123;</span><br><span class="line"><span class="keyword">if</span> (k&gt;D+<span class="number">1</span>) Add(ID(i,j,k<span class="number">-1</span>),ID(x,y,k<span class="number">-1</span>-D),INF);</span><br><span class="line"><span class="keyword">if</span> (k+D&lt;Z) Add(ID(i,j,k+D),ID(x,y,k),INF);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (Bfs(<span class="number">0</span>,n+<span class="number">1</span>)) <span class="built_in">memcpy</span>(cur,lnk,<span class="keyword">sizeof</span>(lnk)),ans+=Dfs(<span class="number">0</span>,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有一块 &lt;span class=&quot;math inline&quot;&gt;\(X\times Y\times Z\)&lt;/span&gt; 的切糕，每个点 &lt;span class=&quot;math inline&quot;&gt;\((x,y,z)\)&lt;/span&gt; 都有不和谐值 &lt;span class=&quot;math inline&quot;&gt;\(v(x,y,z)\)&lt;/span&gt; 。现在要切这块切糕，为每个直线 &lt;span class=&quot;math inline&quot;&gt;\((x,y)\)&lt;/span&gt; 选出一个点 &lt;span class=&quot;math inline&quot;&gt;\(z\)&lt;/span&gt; ，一种切法的不和谐值为选出点的不和谐值之和，为了平整还需要满足两条相邻的直线选出的点距离不超过 &lt;span class=&quot;math inline&quot;&gt;\(D\)&lt;/span&gt; 。求最小不和谐值。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="BZOJ" scheme="http://yoursite.com/categories/Online-Judge/BZOJ/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>[二分+后缀数组]BZOJ4310【跳蚤】题解</title>
    <link href="http://yoursite.com/2018/04/11/BZOJ4310/"/>
    <id>http://yoursite.com/2018/04/11/BZOJ4310/</id>
    <published>2018-04-11T03:19:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有一个串 <span class="math inline">\(S\)</span> ，现在要把 <span class="math inline">\(S\)</span> 分成不超过 <span class="math inline">\(K\)</span> 段，从每一个子串选出最大的子串，再从这些最大的子串中选出最大的串"JZ串"，求最小的"JZ串"（BZOJ题面有误，应该是最小的而不是最大的）。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>最大值最小想到二分，但是这怎么二分答案？直接二分串肯定是不行的，所以我们可以二分 <span class="math inline">\(k\)</span> 表示第 <span class="math inline">\(k\)</span> 大的串，至于怎么求第 <span class="math inline">\(k\)</span> 大的串，后缀数组就可以解决。</p><p>然后我们考虑验证，在原串上跑，如果目前区间中有子串大于子串 <span class="math inline">\(k\)</span>（用LCP判断即可），就说明需要换组。如果组的数量不超过 <span class="math inline">\(K\)</span> 就验证成功。</p><p>如果正着来，每次添加了一个字符实际上添加了一堆子串，肯定会TLE。</p><p>所以我们反着来，会发现每次添加了一个字符产生的子串中只有最长的那个有用（显然），这样效率就正常了。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>,Log=<span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> K,n,l,r,SA[maxn+<span class="number">5</span>],rk[maxn+<span class="number">5</span>],t[(maxn&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>],ha[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> RMQ[maxn+<span class="number">5</span>][Log+<span class="number">5</span>],lg2[maxn+<span class="number">5</span>];<span class="keyword">char</span> s[maxn+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) ha[i]=<span class="number">0</span>;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ha[rk[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) ha[i]+=ha[i<span class="number">-1</span>];<span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) SA[ha[rk[t[i]]]--]=t[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Make</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m=<span class="number">256</span>;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) rk[i]=s[i],t[i]=i;Sort(n,m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;n;m=p,k&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line">p=<span class="number">0</span>;<span class="keyword">for</span> (<span class="keyword">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;i++) t[++p]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (SA[i]&gt;k) t[++p]=SA[i]-k;</span><br><span class="line">Sort(n,m);<span class="built_in">memcpy</span>(t,rk,<span class="keyword">sizeof</span>(rk));rk[SA[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;rk[SA[i++]]=p) p+=t[SA[i<span class="number">-1</span>]]!=t[SA[i]]||t[SA[i<span class="number">-1</span>]+k]!=t[SA[i]+k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,k=<span class="number">0</span>;i&lt;=n;RMQ[rk[i++]][<span class="number">0</span>]=k) &#123;<span class="keyword">if</span> (k) k--;<span class="keyword">while</span> (s[i+k]==s[SA[rk[i]<span class="number">-1</span>]+k]) k++;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=Log;j++) <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++) RMQ[i][j]=min(RMQ[i][j<span class="number">-1</span>],RMQ[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) lg2[i]=lg2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getsub</span><span class="params">(LL mid)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">mid-=n-SA[i]+<span class="number">1</span>-RMQ[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (mid&lt;=<span class="number">0</span>) &#123;l=SA[i];r=n+mid;<span class="keyword">return</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCP</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==y) <span class="keyword">return</span> n-x+<span class="number">1</span>;x=rk[x];y=rk[y];</span><br><span class="line"><span class="keyword">if</span> (x&gt;y) swap(x,y);x++;<span class="keyword">int</span> k=lg2[y-x+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> min(RMQ[x][k],RMQ[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lcp=LCP(L,l),A=R-L+<span class="number">1</span>,B=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (lcp&gt;A) lcp=A;<span class="keyword">if</span> (lcp&gt;B) lcp=B;</span><br><span class="line"><span class="keyword">if</span> (lcp==A||lcp==B) <span class="keyword">return</span> A&gt;B;</span><br><span class="line"><span class="keyword">return</span> s[L+lcp]&gt;s[l+lcp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL mid)</span></span>&#123;</span><br><span class="line">getsub(mid);<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (s[i]&gt;s[l]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>,lst=n;<span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--) <span class="keyword">if</span> (cmp(i,lst,l,r)) k++,lst=i;</span><br><span class="line"><span class="keyword">return</span> k&lt;=K;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);Make(n=<span class="built_in">strlen</span>(s+<span class="number">1</span>));RMQ[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">LL L=<span class="number">1</span>,R=<span class="number">0</span>;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) R+=n-SA[i]+<span class="number">1</span>-RMQ[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (LL mid=L+(R-L&gt;&gt;<span class="number">1</span>);L&lt;=R;mid=L+(R-L&gt;&gt;<span class="number">1</span>)) check(mid)?R=mid<span class="number">-1</span>:L=mid+<span class="number">1</span>;</span><br><span class="line">getsub(L);<span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++) <span class="built_in">putchar</span>(s[i]);<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有一个串 &lt;span class=&quot;math inline&quot;&gt;\(S\)&lt;/span&gt; ，现在要把 &lt;span class=&quot;math inline&quot;&gt;\(S\)&lt;/span&gt; 分成不超过 &lt;span class=&quot;math inline&quot;&gt;\(K\)&lt;/span&gt; 段，从每一个子串选出最大的子串，再从这些最大的子串中选出最大的串&quot;JZ串&quot;，求最小的&quot;JZ串&quot;（BZOJ题面有误，应该是最小的而不是最大的）。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="BZOJ" scheme="http://yoursite.com/categories/Online-Judge/BZOJ/"/>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="后缀数组" scheme="http://yoursite.com/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>[DP]UOJ300(CTSC2017)【吉夫特】题解</title>
    <link href="http://yoursite.com/2018/04/07/UOJ300/"/>
    <id>http://yoursite.com/2018/04/07/UOJ300/</id>
    <published>2018-04-07T13:08:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>求不上升OrzJZ子序列的个数，OrzJZ子序列需要满足 <span class="math inline">\(\prod_{i=2}^{k}{a_{i-1}\choose a_i}\ mod\ 2=1\)</span> 。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>因为一个 <span class="math inline">\(0\)</span> 都不能出现，根据Lucas定理，子序列必须前一项 <span class="math inline">\(and\)</span> 后一项 <span class="math inline">\(=\)</span> 后一项才能满足这个要求。那么我们就可以直接枚举子集来搞……题目里又有神助攻“没有相同的”，所以效率就是 <span class="math inline">\(O(3^{log_2a_{max}})\)</span> 。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">211985</span>,maxa=<span class="number">262144</span>,MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,pos[maxa],f[maxa],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AMOD</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> tem)</span> </span>&#123;<span class="keyword">if</span> ((x+=tem)&gt;=MOD) x-=MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),pos[x]=i,f[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxa;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=pos[i]?i&amp;i<span class="number">-1</span>:<span class="number">0</span>;j;j=i&amp;j<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> (pos[j]&gt;pos[i]) AMOD(f[i],f[j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxa;i++) <span class="keyword">if</span> (pos[i]) AMOD(ans,f[i]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;求不上升OrzJZ子序列的个数，OrzJZ子序列需要满足 &lt;span class=&quot;math inline&quot;&gt;\(\prod_{i=2}^{k}{a_{i-1}\choose a_i}\ mod\ 2=1\)&lt;/span&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="UOJ" scheme="http://yoursite.com/categories/Online-Judge/UOJ/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[最大密度子图]2017计蒜之道初赛第三场【腾讯狼人杀】题解</title>
    <link href="http://yoursite.com/2018/04/07/jisuanke15549/"/>
    <id>http://yoursite.com/2018/04/07/jisuanke15549/</id>
    <published>2018-04-07T07:59:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有 <span class="math inline">\(n\)</span> 个神犇JZ，某两个JZ配合有神犇值，共有 <span class="math inline">\(m\)</span> 组这样的JZ。现在要选出若干个JZ（假设选了 <span class="math inline">\(k\)</span> 个），贡献为存在于这些JZ中的所有配合的神犇值之和除以 <span class="math inline">\(k(2n-k)\)</span> ，求最大贡献。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>显然是最大密度子图啊？但是我太naive了，一直在想怎么把 <span class="math inline">\(k(2n-k)\)</span> 放进点权里，实际上应该放到边权里……先二分，然后推一推： <span class="math display">\[{\sum w_{i,j}\over k(2n-k)}\ge mid\\\sum w_{i,j}-k(2n-k)mid\ge 0\\\sum w_{i,j}-2nkmid+k^2mid\ge 0\\\sum w_{i,j}-2nkmid+kmid+{k(k-1)\over 2}2mid\ge 0\\\sum(w_{i,j}+mid)-(2n-1)kmid\ge 0\]</span> 再就很明显了……新边权为 <span class="math inline">\(w_{i,j}+mid\)</span> ，新点权为 <span class="math inline">\((2n-1)mid\)</span> ，刷最大密度子图就行了。</p><h2 id="示例程序">示例程序</h2><p>精度坑死人！！！我恨分数规划！！！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> DB;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">400</span>,maxm=maxn*maxn,maxe=maxm+maxn&lt;&lt;<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,w[maxn+<span class="number">5</span>][maxn+<span class="number">5</span>];<span class="keyword">bool</span> chs[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> E,lnk[maxn+<span class="number">5</span>],cur[maxn+<span class="number">5</span>],son[maxe+<span class="number">5</span>],nxt[maxe+<span class="number">5</span>];</span><br><span class="line">DB D[maxn+<span class="number">5</span>];pair&lt;DB,DB&gt; e[maxe+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> que[maxn+<span class="number">5</span>],dis[maxn+<span class="number">5</span>],ti,vis[maxn+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fcmp</span><span class="params">(DB a,DB b)</span> </span>&#123;<span class="keyword">if</span> (<span class="built_in">fabs</span>(a-b)&lt;<span class="number">1e-10</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">if</span> (a&lt;b) <span class="keyword">return</span> <span class="number">-1</span>;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,DB z)</span></span>&#123;</span><br><span class="line">son[E]=y;e[E]=mp(<span class="number">0</span>,z);nxt[E]=lnk[x];lnk[x]=E++;</span><br><span class="line">son[E]=x;e[E]=mp(<span class="number">0</span>,<span class="number">0</span>);nxt[E]=lnk[y];lnk[y]=E++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Head=<span class="number">0</span>,Tail=<span class="number">0</span>;que[++Tail]=s;vis[s]=++ti;dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (Head!=Tail)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=que[++Head],j=lnk[x],u;~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (vis[u=son[j]]&lt;ti&amp;&amp;fcmp(e[j].fr,e[j].sc)&lt;<span class="number">0</span>) que[++Tail]=u,vis[u]=ti,dis[u]=dis[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> vis[t]==ti;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t,DB MIN=<span class="number">1e18</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==t||!fcmp(MIN,<span class="number">0</span>)) <span class="keyword">return</span> MIN;DB now,f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;j=cur[x];~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (dis[x]+<span class="number">1</span>==dis[son[j]]&amp;&amp;fcmp(now=Dfs(son[j],t,min(MIN,e[j].sc-e[j].fr)),<span class="number">0</span>))&#123;</span><br><span class="line">e[j].fr+=now;e[j^<span class="number">1</span>].fr-=now;f+=now;</span><br><span class="line"><span class="keyword">if</span> (!fcmp(MIN-=now,<span class="number">0</span>)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(DB mid)</span></span>&#123;</span><br><span class="line">DB U=n*(<span class="number">2</span>*mid+<span class="number">100</span>);E=<span class="number">0</span>;<span class="built_in">memset</span>(lnk,<span class="number">255</span>,<span class="keyword">sizeof</span>(lnk));<span class="built_in">memset</span>(D,<span class="number">0</span>,<span class="keyword">sizeof</span>(D));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">Add(i,j,w[i][j]+<span class="number">2</span>*mid);Add(j,i,w[i][j]+<span class="number">2</span>*mid);</span><br><span class="line">D[i]+=w[i][j]+<span class="number">2</span>*mid;D[j]+=w[i][j]+<span class="number">2</span>*mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Add(<span class="number">0</span>,i,chs[i]?<span class="number">1e18</span>:U),Add(i,n+<span class="number">1</span>,U+<span class="number">2</span>*mid*(<span class="number">2</span>*n<span class="number">-1</span>)-D[i]);</span><br><span class="line">DB MAX=<span class="number">0</span>;<span class="keyword">while</span> (Bfs(<span class="number">0</span>,n+<span class="number">1</span>)) <span class="built_in">memcpy</span>(cur,lnk,<span class="keyword">sizeof</span>(lnk)),MAX+=Dfs(<span class="number">0</span>,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> fcmp(U*n,MAX)&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z),w[x][y]=w[y][x]=z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),chs[i]=x;</span><br><span class="line">DB L=<span class="number">0</span>,R=m*<span class="number">100</span>,mid;<span class="keyword">while</span> (fcmp(R-L,<span class="number">1e-8</span>)&gt;<span class="number">0</span>) check(mid=(L+R)/<span class="number">2</span>)?L=mid:R=mid;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>,(<span class="keyword">double</span>)L),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个神犇JZ，某两个JZ配合有神犇值，共有 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 组这样的JZ。现在要选出若干个JZ（假设选了 &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; 个），贡献为存在于这些JZ中的所有配合的神犇值之和除以 &lt;span class=&quot;math inline&quot;&gt;\(k(2n-k)\)&lt;/span&gt; ，求最大贡献。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="计蒜客" scheme="http://yoursite.com/categories/Online-Judge/%E8%AE%A1%E8%92%9C%E5%AE%A2/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="分数规划" scheme="http://yoursite.com/tags/%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>[决策单调性]BZOJ2369【区间】题解</title>
    <link href="http://yoursite.com/2018/04/02/BZOJ2369/"/>
    <id>http://yoursite.com/2018/04/02/BZOJ2369/</id>
    <published>2018-04-02T03:47:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有 <span class="math inline">\(n\)</span> 个区间 <span class="math inline">\(A_i=[L_i,R_i]\)</span> ，现在选 <span class="math inline">\(m\)</span> 个 <span class="math inline">\((m&gt;1)\)</span> 区间，贡献为 <span class="math inline">\(|A_{k_1}\cap A_{k_2}\cap A_{k_3}\cdots A_{k_m}|\times|A_{k_1}\cup A_{k_2}\cup A_{k_3}\cdots A_{k_m}|\)</span> ，求最大贡献。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>显然最大贡献是只选两个区间，所以我们先把区间排序，去掉被包含的区间（注意去重时也需要计算贡献），然后就可以定义 <span class="math inline">\(f_i=max\{(R_j-L_i)(R_i-L_j)|j&lt;i\}\)</span> 表示 <span class="math inline">\(i\)</span> 的最大贡献。</p><p>决策单调性是什么呢？和斜率优化类似，如果 <span class="math inline">\(j\)</span> 对于 <span class="math inline">\(k\)</span> 比 <span class="math inline">\(i\)</span> 好能够推出对于 <span class="math inline">\(t(t&gt;k)\)</span> <span class="math inline">\(j\)</span> 也比 <span class="math inline">\(i\)</span> 好，就说明决策点是单调的，这样就可以减少很多没有必要的枚举。</p><p>对于这题，令 <span class="math inline">\(i&lt;j&lt;k&lt;t\)</span> ，假设 <span class="math inline">\(j\)</span> 比 <span class="math inline">\(i\)</span> 好，那么： <span class="math display">\[(R_k-L_j)(R_j-L_k)&gt;(R_k-L_i)(R_i-L_k)\\R_jR_k-R_kL_k-R_jL_j+L_jL_k&gt;R_iR_k-R_kL_k-R_iL_i+L_iL_k\\R_k(R_j-R_i)+L_k(L_j-L_i)&gt;R_jL_j-R_iL_i\\\because L_t&gt;L_k,R_t&gt;R_k\\R_t(R_j-R_i)+L_t(L_j-L_i)&gt;R_jL_j-R_iL_i\\(R_t-L_j)(R_j-L_t)&gt;(R_t-L_i)(R_i-L_t)\\\]</span></p><p>所以满足决策单调性，我们就可以分治了！<span class="math inline">\(Solve(L,R,l,r)\)</span> 表示求出 <span class="math inline">\(f_{[L,R]}\)</span> ，决策点范围在 <span class="math inline">\([l,r]\)</span> 。那么我们可以先求出 <span class="math inline">\(f_{mid}\)</span> 的决策点 <span class="math inline">\(pos\)</span> ，然后 <span class="math inline">\(Solve(L,mid,l,pos),Solve(mid+1,R,pos,r)\)</span> 就行了。</p><p>注意决策单调性并不一定都能够用分治，因为很明显 <span class="math inline">\(f\)</span> 在 <span class="math inline">\(Solve\)</span> 之前是未知的，所以如果 <span class="math inline">\(f\)</span> 的转移方程中包含 <span class="math inline">\(f\)</span> 就不能够用分治了。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;LL ans;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; s[maxn+<span class="number">5</span>];<span class="keyword">bool</span> vis[maxn+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Eoln(x) ((x)==10||(x)==13||(x)==EOF)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">readc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>],*l=buf,*r=buf;</span><br><span class="line"><span class="keyword">if</span> (l==r) r=(l=buf)+fread(buf,<span class="number">1</span>,<span class="number">100000</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span> EOF;<span class="keyword">return</span> *l++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">readi</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;<span class="keyword">char</span> ch=readc(),lst=<span class="string">'+'</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span> (ch==EOF) <span class="keyword">return</span> EOF;lst=ch;ch=readc();&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) tot=(tot&lt;&lt;<span class="number">3</span>)+(tot&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>,ch=readc();</span><br><span class="line"><span class="keyword">return</span> lst==<span class="string">'-'</span>?x=-tot:x=tot,Eoln(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; a,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; b)</span> </span>&#123;<span class="keyword">return</span> a.fr&lt;b.fr||a.fr==b.fr&amp;&amp;a.sc&gt;b.sc;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> val(i,j) ((LL)(s[j].sc-s[i].fr)*(s[i].sc-s[j].fr))</span></span><br><span class="line"><span class="function">LL <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L==R) &#123;LL MAX=<span class="number">0</span>;<span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r&amp;&amp;i&lt;L;i++) MAX=max(MAX,val(i,L));<span class="keyword">return</span> MAX;&#125;</span><br><span class="line"><span class="keyword">int</span> mid=L+(R-L&gt;&gt;<span class="number">1</span>);LL MAX=<span class="number">0</span>;<span class="keyword">int</span> pos=mid;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r&amp;&amp;i&lt;mid;i++) <span class="keyword">if</span> (val(i,mid)&gt;MAX) MAX=val(i,mid),pos=i;</span><br><span class="line"><span class="keyword">return</span> max(MAX,max(Solve(L,mid,l,pos),Solve(mid+<span class="number">1</span>,R,pos,r)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">readi(n);<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) readi(s[i].fr),readi(s[i].sc);sort(s+<span class="number">1</span>,s+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j)</span><br><span class="line"><span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;=n;vis[j++]=<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (s[j].sc&gt;s[i].sc) <span class="keyword">break</span>;</span><br><span class="line">ans=max(ans,(LL)(s[i].sc-s[i].fr)*(s[j].sc-s[j].fr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> tot=n,i=(n=<span class="number">0</span>,<span class="number">1</span>);i&lt;=tot;i++) <span class="keyword">if</span> (!vis[i]) s[++n]=s[i];</span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans),<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,max(ans,Solve(<span class="number">2</span>,n,<span class="number">1</span>,n<span class="number">-1</span>))),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个区间 &lt;span class=&quot;math inline&quot;&gt;\(A_i=[L_i,R_i]\)&lt;/span&gt; ，现在选 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 个 &lt;span class=&quot;math inline&quot;&gt;\((m&amp;gt;1)\)&lt;/span&gt; 区间，贡献为 &lt;span class=&quot;math inline&quot;&gt;\(|A_{k_1}\cap A_{k_2}\cap A_{k_3}\cdots A_{k_m}|\times|A_{k_1}\cup A_{k_2}\cup A_{k_3}\cdots A_{k_m}|\)&lt;/span&gt; ，求最大贡献。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="BZOJ" scheme="http://yoursite.com/categories/Online-Judge/BZOJ/"/>
    
    
      <category term="决策单调性" scheme="http://yoursite.com/tags/%E5%86%B3%E7%AD%96%E5%8D%95%E8%B0%83%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>[DP]BZOJ1566(NOI2009)【管道取珠】题解</title>
    <link href="http://yoursite.com/2018/03/29/BZOJ1566/"/>
    <id>http://yoursite.com/2018/03/29/BZOJ1566/</id>
    <published>2018-03-29T13:04:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有两个管道，第一个有 <span class="math inline">\(n\)</span> 个黑白珠子，第二个有 <span class="math inline">\(m\)</span> 个黑白珠子，每次可以从一个管道取出最靠管道口的珠子。假设有 <span class="math inline">\(k\)</span> 中取珠子的方法，第 <span class="math inline">\(i\)</span> 种方案的方案数为 <span class="math inline">\(a_i\)</span> 那么贡献为 <span class="math inline">\(\sum_{i=1}^{k}a_i^2\)</span> 。求贡献。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>开平方可以理解为每种方案都和相同的方案有贡献，所以我们可以认为有两个取珠游戏同时进行，且只有两个游戏取出来的方案一样时才有贡献，也就是说：</p><p>定义 <span class="math inline">\(f[i][j][k][t]\)</span> 表示第一个游戏的第一个管道取了 <span class="math inline">\(i\)</span> 个，第二个管道取了 <span class="math inline">\(j\)</span> 个；第二个游戏的第一个管道取了 <span class="math inline">\(k\)</span> 个，第二个管道取了 <span class="math inline">\(t\)</span> 个的贡献，那么就只有当每次取出来的珠子颜色相同才能转移，就变成了很简单的DP。</p><p>实际上因为 <span class="math inline">\(i+j=k+t\)</span> ，所以只需要 <span class="math inline">\(f[i][j][k]\)</span> 就行了。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500</span>,MOD=<span class="number">1024523</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn+<span class="number">5</span>],b[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> f[maxn+<span class="number">5</span>][maxn+<span class="number">5</span>][maxn+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">getupr</span><span class="params">()</span> </span>&#123;<span class="keyword">char</span> ch=getchar();<span class="keyword">while</span> (!<span class="built_in">isupper</span>(ch)) ch=getchar();<span class="keyword">return</span> ch;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AMOD</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> tem)</span> </span>&#123;<span class="keyword">if</span> ((x+=tem)&gt;=MOD) x-=MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) a[i]=getupr()-<span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=m;i;i--) b[i]=getupr()-<span class="string">'A'</span>;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>,t=i+j;k&lt;=i+j&amp;&amp;k&lt;=n;k++,t--)&#123;</span><br><span class="line"><span class="keyword">int</span> &amp;F=f[i][j][k];</span><br><span class="line"><span class="keyword">if</span> (i&amp;&amp;t&amp;&amp;a[i]==b[t]) AMOD(F,f[i<span class="number">-1</span>][j][k]);</span><br><span class="line"><span class="keyword">if</span> (i&amp;&amp;k&amp;&amp;a[i]==a[k]) AMOD(F,f[i<span class="number">-1</span>][j][k<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span> (j&amp;&amp;t&amp;&amp;b[j]==b[t]) AMOD(F,f[i][j<span class="number">-1</span>][k]);</span><br><span class="line"><span class="keyword">if</span> (j&amp;&amp;k&amp;&amp;b[j]==a[k]) AMOD(F,f[i][j<span class="number">-1</span>][k<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[n][m][n]),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有两个管道，第一个有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个黑白珠子，第二个有 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 个黑白珠子，每次可以从一个管道取出最靠管道口的珠子。假设有 &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; 中取珠子的方法，第 &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt; 种方案的方案数为 &lt;span class=&quot;math inline&quot;&gt;\(a_i\)&lt;/span&gt; 那么贡献为 &lt;span class=&quot;math inline&quot;&gt;\(\sum_{i=1}^{k}a_i^2\)&lt;/span&gt; 。求贡献。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="BZOJ" scheme="http://yoursite.com/categories/Online-Judge/BZOJ/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>简单解决hexo-theme-yilia Markdown列表显示错误的问题</title>
    <link href="http://yoursite.com/2018/03/20/YiliaMarkdownList/"/>
    <id>http://yoursite.com/2018/03/20/YiliaMarkdownList/</id>
    <published>2018-03-20T09:50:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>建立Hexo静态博客之后，我一眼相中了Litten大大的yilia主题。我对这款主题基本上满意，一些不满意的地方即使困扰已久折腾之后也魔改掉了（比如代码片什么的QAQ）。</p><p>不过有一次忽然发现yilia主题Markdown列表嵌套（好像夹杂代码片也会）会显示出错……作为一个强迫症重度患者，这就很不能忍……</p><a id="more"></a><p>比之前折腾了更久之后……今天了发现问题所在：（因为我并不是很懂webpack什么的……所以就直接改在main.*.css上了XD）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>:none outside none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>啥玩意啊这是……度娘之后发现这货取消了主题中所有列表的开头符（包括有序列表的前置数字），然后再看文章配置中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-entry</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="selector-class">.article-entry</span> <span class="selector-tag">li</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.article-entry</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个应该是Litten大大自己配置的列表开头符。</p><p>去Lynstery和linkfqy的主题配置里看了看，发现基本没有配置过列表？事实上，浏览器会自带列表样式（就是开发者模式里显示的<code>user agent stylesheet</code>），所以我们可以去掉Litten大大配置的列表开头符，然后干掉前面说的那个取消开头符的语句，会发现列表正常了!（ps：稍微正常点的浏览器都自带列表样式，所以不需要特别担心兼容性。再ps：去掉代码之后列表位置会有些奇怪，稍微修改样式即可。）</p><p>但是……侧边栏菜单都多出了列表开头符……我们可以在侧边栏菜单的样式中添加<code>list-style-type: none;</code>，就可以和以前一样了。同理标签等列表前面也会多出开头符，手动添加代码即可。</p><hr><p>因为水平有限，不能做到保留Litten大大的样式，这种更难的活就交给熟练掌握css的大佬吧QwQ。列表实例：</p><ul><li><p>我是一级列表</p><p>我是文字</p><ul><li><p>我是二级列表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>我是三级列表</p><ol type="1"><li><p>我是有序列表1</p><p>Orz%%%Lynstery</p></li><li><p>我是有序列表2</p></li></ol></li></ul></li></ul></li><li><p>我还是一级列表</p></li></ul><p>是不是很棒棒啊！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;建立Hexo静态博客之后，我一眼相中了Litten大大的yilia主题。我对这款主题基本上满意，一些不满意的地方即使困扰已久折腾之后也魔改掉了（比如代码片什么的QAQ）。&lt;/p&gt;
&lt;p&gt;不过有一次忽然发现yilia主题Markdown列表嵌套（好像夹杂代码片也会）会显示出错……作为一个强迫症重度患者，这就很不能忍……&lt;/p&gt;
    
    </summary>
    
      <category term="杂" scheme="http://yoursite.com/categories/%E6%9D%82/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/%E6%9D%82/Hexo/"/>
    
    
      <category term="自己的理解" scheme="http://yoursite.com/tags/%E8%87%AA%E5%B7%B1%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[wqs二分+DP]POJ1160【Post Office】题解</title>
    <link href="http://yoursite.com/2018/03/15/POJ1160/"/>
    <id>http://yoursite.com/2018/03/15/POJ1160/</id>
    <published>2018-03-15T07:54:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有 <span class="math inline">\(n\)</span> 个村庄，现在要建 <span class="math inline">\(m\)</span> 个邮局，一种方案的代价是每个村庄到最近的邮局的距离之和。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>显然是 <span class="math inline">\(O(n^2m)\)</span> DP吧？数据小的可怜，这样就可以过了……</p><p>不过有一种更好的方法，可以把 <span class="math inline">\(m\)</span> 优化到 <span class="math inline">\(log_2m\)</span> ，这就是wqs(%%%Orz)二分了。</p><p>想法是这样的：去掉 <span class="math inline">\(f[i][j]\)</span> (前 <span class="math inline">\(i\)</span> 个村庄中建了 <span class="math inline">\(j\)</span> 个邮局)中的 <span class="math inline">\(j\)</span> ，枚举一个 <span class="math inline">\(cost\)</span> 表示建邮局需要额外的 <span class="math inline">\(cost\)</span> 花费，再记录一个 <span class="math inline">\(g[i]\)</span> 表示前 <span class="math inline">\(i\)</span> 个村庄在最优解的情况下最少建多少邮局。接下来刷DP，如果 <span class="math inline">\(g[n]\le m\)</span> 就说明可行。由此可见 <span class="math inline">\(cost\)</span> 是可以二分枚举的，所以我们就可以愉快的把 <span class="math inline">\(O(n^2m)\)</span> 优化成 <span class="math inline">\(O(n^2log_2m)\)</span> 。</p><p>严格的来说，只有当原函数 <span class="math inline">\(g(x)\)</span> 的斜率单调，才可以这么处理。因为枚举 <span class="math inline">\(cost\)</span> 实际上是一个逼近 <span class="math inline">\(g(x)\)</span> 斜率的过程 <span class="math inline">\([g(x)-x\cdot cost]&#39;=g&#39;(x)-cost\)</span> ，如果 <span class="math inline">\(g&#39;(x)\)</span> 不是单调的，就没办法二分枚举 <span class="math inline">\(cost\)</span> 了。</p><p>还有要注意的是，最后并不一定刚好停在 <span class="math inline">\(m\)</span> 个的位置，不过这并没有什么关系（反正答案是一样的），只不过算答案的时候不能用 <span class="math inline">\(f[n]-g[n]\cdot cost\)</span> ，一定要用 <span class="math inline">\(f[n]-m\cdot cost\)</span> ，因为题目要求的是 <span class="math inline">\(m\)</span> 个。</p><p>另一道经典的wqs二分是<a href="/2017/10/30/BZOJ2654/">BZOJ2654</a>，那时候说这二分怎么这么神奇，原来是wqs二分QAQ。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,dis[maxn+<span class="number">5</span>],pre[maxn+<span class="number">5</span>][maxn+<span class="number">5</span>],suf[maxn+<span class="number">5</span>][maxn+<span class="number">5</span>],w[maxn+<span class="number">5</span>][maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> f[maxn+<span class="number">5</span>],g[maxn+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Fix</span><span class="params">(<span class="keyword">int</span> fj,<span class="keyword">int</span> gj,<span class="keyword">int</span> &amp;fi,<span class="keyword">int</span> &amp;gi)</span> </span>&#123;<span class="keyword">if</span> (fj&lt;fi||fj==fi&amp;&amp;gj&lt;gi) fi=fj,gi=gj;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> cst)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">63</span>,<span class="keyword">sizeof</span>(f));f[<span class="number">0</span>]=<span class="number">0</span>;g[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">Fix(f[j]+w[j+<span class="number">1</span>][i]+cst,g[j]+<span class="number">1</span>,f[i],g[i]);</span><br><span class="line"><span class="keyword">return</span> g[n]&lt;=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;dis[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j;j--) pre[j][i]=pre[j+<span class="number">1</span>][i]+dis[i]-dis[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;=n;j++) suf[i][j]=suf[i][j<span class="number">-1</span>]+dis[j]-dis[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,k;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=(k=i);j&lt;=n;j++)</span><br><span class="line">w[i][j]=pre[i][i+j&gt;&gt;<span class="number">1</span>]+suf[i+j&gt;&gt;<span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">int</span> L=<span class="number">0</span>,R=dis[n]*n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid=L+(R-L&gt;&gt;<span class="number">1</span>);L&lt;=R;mid=L+(R-L&gt;&gt;<span class="number">1</span>)) check(mid)?R=mid<span class="number">-1</span>:L=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> check(L),<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[n]-m*L),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个村庄，现在要建 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 个邮局，一种方案的代价是每个村庄到最近的邮局的距离之和。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="POJ" scheme="http://yoursite.com/categories/Online-Judge/POJ/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[最大密度子图]POJ3155【Hard Life】题解</title>
    <link href="http://yoursite.com/2018/03/14/POJ3155/"/>
    <id>http://yoursite.com/2018/03/14/POJ3155/</id>
    <published>2018-03-14T06:28:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有 <span class="math inline">\(n\)</span> 个员工 <span class="math inline">\(m\)</span> 条矛盾，现在要炒若干个员工的鱿鱼，一组方案的权值是矛盾数与员工数的比值。求最大比值的方案。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p><a href="/2018/03/08/MinCutModel/#%E6%9C%80%E5%A4%A7%E5%AF%86%E5%BA%A6%E5%AD%90%E5%9B%BE">最大密度子图</a>模板题。<del>双倍经验BZOJ1312，没权限号就在POJ做了。</del></p><p>精度略有毒，我之前的二分写法一直卡不过去，看来以后还是换成这次这种二分写法吧QAQ。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> DB;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>,maxm=<span class="number">1000</span>,maxe=maxn+maxm&lt;&lt;<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,x[maxm+<span class="number">5</span>],y[maxm+<span class="number">5</span>],D[maxn+<span class="number">5</span>],ans;</span><br><span class="line"><span class="keyword">int</span> E,lnk[maxn+<span class="number">5</span>],nxt[maxe+<span class="number">5</span>],son[maxe+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cur[maxn+<span class="number">5</span>],que[maxn+<span class="number">5</span>],ti,vis[maxn+<span class="number">5</span>],dis[maxn+<span class="number">5</span>];</span><br><span class="line">pair&lt;DB,DB&gt; e[maxe+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fcmp</span><span class="params">(DB a,DB b)</span> </span>&#123;<span class="keyword">if</span> (<span class="built_in">fabs</span>(a-b)&lt;<span class="number">1e-8</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">if</span> (a&lt;b) <span class="keyword">return</span> <span class="number">-1</span>;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,DB z)</span></span>&#123;</span><br><span class="line">son[E]=y;e[E]=mp(<span class="number">0</span>,z);nxt[E]=lnk[x];lnk[x]=E++;</span><br><span class="line">son[E]=x;e[E]=mp(<span class="number">0</span>,<span class="number">0</span>);nxt[E]=lnk[y];lnk[y]=E++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Head=<span class="number">0</span>,Tail=<span class="number">0</span>;que[++Tail]=s;vis[s]=++ti;dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (Head!=Tail)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=que[++Head],j=lnk[x],u;~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (vis[u=son[j]]&lt;ti&amp;&amp;fcmp(e[j].fr,e[j].sc)&lt;<span class="number">0</span>) que[++Tail]=u,vis[u]=ti,dis[u]=dis[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> vis[t]==ti;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DB <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> gl,DB MIN=<span class="number">1e100</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==gl||!fcmp(MIN,<span class="number">0</span>)) <span class="keyword">return</span> MIN;DB f=<span class="number">0</span>,now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;j=cur[x];~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (dis[x]+<span class="number">1</span>==dis[son[j]]&amp;&amp;fcmp(now=Dfs(son[j],gl,min(MIN,e[j].sc-e[j].fr)),<span class="number">0</span>))&#123;</span><br><span class="line">f+=now;e[j].fr+=now;e[j^<span class="number">1</span>].fr-=now;</span><br><span class="line"><span class="keyword">if</span> (!fcmp(MIN-=now,<span class="number">0</span>)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(DB mid)</span></span>&#123;</span><br><span class="line">E=<span class="number">0</span>;<span class="built_in">memset</span>(lnk,<span class="number">255</span>,<span class="keyword">sizeof</span>(lnk));DB ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Add(<span class="number">0</span>,i,m),Add(i,n+<span class="number">1</span>,m+<span class="number">2</span>*mid-D[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) Add(x[i],y[i],<span class="number">1</span>),Add(y[i],x[i],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (Bfs(<span class="number">0</span>,n+<span class="number">1</span>)) <span class="built_in">memcpy</span>(cur,lnk,<span class="keyword">sizeof</span>(lnk)),ans+=Dfs(<span class="number">0</span>,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> fcmp((DB)m*n,ans)&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=(vis[x]=ti,lnk[x]);~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (fcmp(e[j].fr,e[j].sc)&lt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (vis[son[j]]&lt;ti) ans++,Dfs(son[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]),D[x[i]]++,D[y[i]]++;</span><br><span class="line"><span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"1"</span>),<span class="built_in">puts</span>(<span class="string">"1"</span>),<span class="number">0</span>;DB L=(DB)<span class="number">1</span>/n,R=m;</span><br><span class="line"><span class="keyword">for</span> (DB mid=(L+R)/<span class="number">2</span>;fcmp(<span class="number">1e-5</span>,R-L)&lt;<span class="number">0</span>;mid=(L+R)/<span class="number">2</span>) check(mid)?L=mid:R=mid;</span><br><span class="line">E=<span class="number">0</span>;<span class="built_in">memset</span>(lnk,<span class="number">255</span>,<span class="keyword">sizeof</span>(lnk));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Add(<span class="number">0</span>,i,m),Add(i,n+<span class="number">1</span>,m+<span class="number">2</span>*L-D[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) Add(x[i],y[i],<span class="number">1</span>),Add(y[i],x[i],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (Bfs(<span class="number">0</span>,n+<span class="number">1</span>)) <span class="built_in">memcpy</span>(cur,lnk,<span class="keyword">sizeof</span>(lnk)),Dfs(<span class="number">0</span>,n+<span class="number">1</span>);</span><br><span class="line">ti++;Dfs(<span class="number">0</span>);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (vis[i]==ti) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个员工 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 条矛盾，现在要炒若干个员工的鱿鱼，一组方案的权值是矛盾数与员工数的比值。求最大比值的方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="分数规划" scheme="http://yoursite.com/tags/%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>[最小割+Tarjan]BZOJ1797(Ahoi2009)【Mincut 最小割】题解</title>
    <link href="http://yoursite.com/2018/03/12/BZOJ1797/"/>
    <id>http://yoursite.com/2018/03/12/BZOJ1797/</id>
    <published>2018-03-12T07:45:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>给出一张 <span class="math inline">\(n\)</span> 个点 <span class="math inline">\(m\)</span> 条有向边的图，现在要求 <span class="math inline">\(S,T\)</span> 的最小割，问每一条边：</p><ol type="1"><li>有没有可能出现在最小割中。</li><li>是否一定出现在最小割中。</li></ol><a id="more"></a><h2 id="解题报告">解题报告</h2><p>先跑出随意一种最小割（最大流），然后在残量网络里缩点，接下来好像有结论？</p><ul><li><span class="math inline">\((x,y)\)</span> 可能出现：<span class="math inline">\(SCC_x\not=SCC_y\)</span> 。</li><li><span class="math inline">\((x,y)\)</span> 一定出现：<span class="math inline">\(SCC_S=SCC_x,SCC_y=SCC_T\)</span> 。</li></ul><p><del>yy一下还是挺显然的。</del>因为缩点之后只剩下满流边，所以新图中每一种割都恰好对应原来的一种最小割，只要 <span class="math inline">\(x,y\)</span> 不在同一个强连通分量中，就可以被切断（从而形成某种最小割）；如果 <span class="math inline">\(S\)</span> 和 <span class="math inline">\(x\)</span> 在一起而 <span class="math inline">\(y\)</span> 和 <span class="math inline">\(T\)</span> 在一起，就说明 <span class="math inline">\((x,y)\)</span> 必须切断才可能切断 <span class="math inline">\(S\)</span> 到 <span class="math inline">\(T\)</span> 。最后再注意一下流量为 <span class="math inline">\(0\)</span> 的边就行了。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">4000</span>,maxm=<span class="number">60000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,S,T,x[maxm+<span class="number">5</span>],y[maxm+<span class="number">5</span>],z[maxm+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> dfn[maxn+<span class="number">5</span>],low[maxn+<span class="number">5</span>],top,stk[maxn+<span class="number">5</span>],SCC[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> E,lnk[maxn+<span class="number">5</span>],son[(maxm&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>],nxt[(maxm&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cur[maxn+<span class="number">5</span>],que[maxn+<span class="number">5</span>],ti,vis[maxn+<span class="number">5</span>],dis[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> instk[maxn+<span class="number">5</span>];pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; e[(maxm&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">son[E]=y;e[E]=mp(<span class="number">0</span>,z);nxt[E]=lnk[x];lnk[x]=E++;</span><br><span class="line">son[E]=x;e[E]=mp(<span class="number">0</span>,<span class="number">0</span>);nxt[E]=lnk[y];lnk[y]=E++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Head=<span class="number">0</span>,Tail=<span class="number">0</span>;que[++Tail]=s;vis[s]=++ti;dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (Head!=Tail)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=que[++Head],j=lnk[x],u;~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (vis[u=son[j]]&lt;ti&amp;&amp;e[j].fr&lt;e[j].sc) que[++Tail]=u,vis[u]=ti,dis[u]=dis[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> vis[t]==ti;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> gl,<span class="keyword">int</span> MIN=<span class="number">2e9</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==gl||!MIN) <span class="keyword">return</span> MIN;<span class="keyword">int</span> f=<span class="number">0</span>,now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;j=cur[x];~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (dis[x]+<span class="number">1</span>==dis[son[j]]&amp;&amp;(now=Dfs(son[j],gl,min(MIN,e[j].sc-e[j].fr))))&#123;</span><br><span class="line">f+=now;e[j].fr+=now;e[j^<span class="number">1</span>].fr-=now;</span><br><span class="line"><span class="keyword">if</span> (!(MIN-=now)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++ti;stk[++top]=x;instk[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=lnk[x];~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (e[j].fr&lt;e[j].sc)</span><br><span class="line"><span class="keyword">if</span> (!dfn[son[j]]) Tarjan(son[j]),low[x]=min(low[x],low[son[j]]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (instk[son[j]]) low[x]=min(low[x],dfn[son[j]]);</span><br><span class="line"><span class="keyword">if</span> (dfn[x]==low[x])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y=(SCC[<span class="number">0</span>]++,stk[top--]);;y=stk[top--])</span><br><span class="line">&#123;SCC[y]=SCC[<span class="number">0</span>];instk[y]=<span class="literal">false</span>;<span class="keyword">if</span> (x==y) <span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;S,&amp;T);E=<span class="number">0</span>;<span class="built_in">memset</span>(lnk,<span class="number">255</span>,<span class="keyword">sizeof</span>(lnk));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x[i],&amp;y[i],&amp;z[i]),Add(x[i],y[i],z[i]);</span><br><span class="line"><span class="keyword">while</span> (Bfs(S,T)) <span class="built_in">memcpy</span>(cur,lnk,<span class="keyword">sizeof</span>(lnk)),Dfs(S,T);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (!dfn[i]) Tarjan(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (e[i<span class="number">-1</span>&lt;&lt;<span class="number">1</span>].fr&lt;e[i<span class="number">-1</span>&lt;&lt;<span class="number">1</span>].sc) &#123;<span class="built_in">puts</span>(<span class="string">"0 0"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="built_in">putchar</span>((SCC[x[i]]!=SCC[y[i]])+<span class="number">48</span>);<span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line"><span class="built_in">putchar</span>((SCC[S]==SCC[x[i]]&amp;&amp;SCC[y[i]]==SCC[T])+<span class="number">48</span>);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;给出一张 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个点 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 条有向边的图，现在要求 &lt;span class=&quot;math inline&quot;&gt;\(S,T\)&lt;/span&gt; 的最小割，问每一条边：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;有没有可能出现在最小割中。&lt;/li&gt;
&lt;li&gt;是否一定出现在最小割中。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="BZOJ" scheme="http://yoursite.com/categories/Online-Judge/BZOJ/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="强连通分量" scheme="http://yoursite.com/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>[最大权闭合图]BZOJ4873(Shoi2017)【寿司餐厅】题解</title>
    <link href="http://yoursite.com/2018/03/10/BZOJ4873/"/>
    <id>http://yoursite.com/2018/03/10/BZOJ4873/</id>
    <published>2018-03-10T07:41:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>题目太复杂了QAQ，自己去看吧……<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4873" target="_blank" rel="noopener">吃我传送门</a>。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>很显然最优解一定是选若干个不相交的区间。我们观察题目里的条件，发现带有很多“强制”操作，比如吃了 <span class="math inline">\([L,R]\)</span> ，里面的所有子区间贡献都会被算上，且 <span class="math inline">\([L,R]\)</span> 中所有寿司种类都要付钱……</p><p>由此我们想到这是最大权闭合图，分一下类，有“代号”，“寿司”，“区间”这三种点，然后开始建图：</p><p>寿司 <span class="math inline">\(i\)</span> (区间 <span class="math inline">\([i,i]\)</span> ) <span class="math inline">\(\to\)</span> 代号 <span class="math inline">\(a_i\)</span> ：容量 <span class="math inline">\(+\infty\)</span> 。</p><p>区间 <span class="math inline">\([L,R]\to [L+1,R],[L,R-1]\)</span> ：容量 <span class="math inline">\(+\infty\)</span> 。</p><p>代号 <span class="math inline">\(i\to T\)</span> ：容量 <span class="math inline">\(mi^2\)</span> 。</p><p>寿司 <span class="math inline">\(i\)</span> 点权 <span class="math inline">\(d[i][i]-a[i]\)</span> ：根据点权正负建边。</p><p>区间 <span class="math inline">\([L,R]\)</span> 点权 <span class="math inline">\(d[L][R]\)</span> ：根据点权正负建边。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>,maxt=<span class="number">6050</span>,maxm=maxt*<span class="number">3</span>,MAXINT=((<span class="number">1</span>&lt;&lt;<span class="number">30</span>)<span class="number">-1</span>)*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn+<span class="number">5</span>],d[maxn+<span class="number">5</span>][maxn+<span class="number">5</span>],ID[maxn+<span class="number">5</span>][maxn+<span class="number">5</span>],S=<span class="number">0</span>,T=maxt+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> E,lnk[maxt+<span class="number">5</span>],son[(maxm&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>],nxt[(maxm&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cur[maxt+<span class="number">5</span>],que[maxt+<span class="number">5</span>],ti,vis[maxt+<span class="number">5</span>],dis[maxt+<span class="number">5</span>],ans;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; e[(maxm&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">son[E]=y;nxt[E]=lnk[x];e[E]=mp(<span class="number">0</span>,z);lnk[x]=E++;</span><br><span class="line">son[E]=x;nxt[E]=lnk[y];e[E]=mp(<span class="number">0</span>,<span class="number">0</span>);lnk[y]=E++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Head=<span class="number">0</span>,Tail=<span class="number">0</span>;que[++Tail]=s;vis[s]=++ti;dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (Head!=Tail)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=que[++Head],j=lnk[x],u;~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (vis[u=son[j]]&lt;ti&amp;&amp;e[j].fr&lt;e[j].sc) que[++Tail]=u,vis[u]=ti,dis[u]=dis[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> vis[t]==ti;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> gl,<span class="keyword">int</span> MIN=MAXINT)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==gl||!MIN) <span class="keyword">return</span> MIN;<span class="keyword">int</span> f=<span class="number">0</span>,now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;j=cur[x];~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (dis[x]+<span class="number">1</span>==dis[son[j]]&amp;&amp;(now=Dfs(son[j],gl,min(MIN,e[j].sc-e[j].fr))))&#123;</span><br><span class="line">f+=now;e[j].fr+=now;e[j^<span class="number">1</span>].fr-=now;</span><br><span class="line"><span class="keyword">if</span> (!(MIN-=now)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);E=<span class="number">0</span>;<span class="built_in">memset</span>(lnk,<span class="number">255</span>,<span class="keyword">sizeof</span>(lnk));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;=n;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i][j]),ID[i][j]=++ID[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Add(ID[i][i],T-a[i],MAXINT);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">Add(ID[i][j],ID[i+<span class="number">1</span>][j],MAXINT),Add(ID[i][j],ID[i][j<span class="number">-1</span>],MAXINT);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++) Add(T-i,T,m*i*i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">d[i][i]-a[i]&lt;<span class="number">0</span>?Add(ID[i][i],T,a[i]-d[i][i]):(ans+=d[i][i]-a[i],Add(S,ID[i][i],d[i][i]-a[i]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">d[i][j]&lt;<span class="number">0</span>?Add(ID[i][j],T,-d[i][j]):(ans+=d[i][j],Add(S,ID[i][j],d[i][j]));</span><br><span class="line"><span class="keyword">while</span> (Bfs(S,T)) <span class="built_in">memcpy</span>(cur,lnk,<span class="keyword">sizeof</span>(lnk)),ans-=Dfs(S,T);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;题目太复杂了QAQ，自己去看吧……&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=4873&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;吃我传送门&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
      <category term="BZOJ" scheme="http://yoursite.com/categories/Online-Judge/BZOJ/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>[最大权闭合图]BZOJ1497(NOI2006)【最大获利】题解</title>
    <link href="http://yoursite.com/2018/03/08/BZOJ1497/"/>
    <id>http://yoursite.com/2018/03/08/BZOJ1497/</id>
    <published>2018-03-08T13:14:00.000Z</published>
    <updated>2018-04-29T17:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述">题目概述</h2><p>有 <span class="math inline">\(n\)</span> 个点 <span class="math inline">\(m\)</span> 条边，每个点需要花费 <span class="math inline">\(p_i\)</span> 购买，每条边可以得到 <span class="math inline">\(c_i\)</span> 的价值。现在要购买一些点，如果一条边两端的点都被购买了，就可以得到这条边的价值。求最大价值。</p><a id="more"></a><h2 id="解题报告">解题报告</h2><p>如果一条边要得到价值，那么这条边的两端必须选，这就是闭合图的要求。所以我们把每条边也当成点，然后建图，刷<a href="/2018/03/08/MinCutModel/#%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%9B%BE">最大权闭合图</a>就行了。</p><h2 id="示例程序">示例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">55000</span>,maxm=<span class="number">155000</span>,MAXINT=((<span class="number">1</span>&lt;&lt;<span class="number">30</span>)<span class="number">-1</span>)*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,ans,E,lnk[maxn+<span class="number">5</span>],son[(maxm&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>],nxt[(maxm&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cur[maxn+<span class="number">5</span>],que[maxn+<span class="number">5</span>],ti,vis[maxn+<span class="number">5</span>],dis[maxn+<span class="number">5</span>];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; e[(maxm&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">son[E]=y;nxt[E]=lnk[x];e[E]=mp(<span class="number">0</span>,z);lnk[x]=E++;</span><br><span class="line">son[E]=x;nxt[E]=lnk[y];e[E]=mp(<span class="number">0</span>,<span class="number">0</span>);lnk[y]=E++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Head=<span class="number">0</span>,Tail=<span class="number">0</span>;ti++;que[++Tail]=s;vis[s]=ti;dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (Head!=Tail)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=que[++Head],j=lnk[x],u;~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (vis[u=son[j]]&lt;ti&amp;&amp;e[j].fr&lt;e[j].sc) que[++Tail]=u,vis[u]=ti,dis[u]=dis[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> vis[t]==ti;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> gl,<span class="keyword">int</span> MIN=MAXINT)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==gl||!MIN) <span class="keyword">return</span> MIN;<span class="keyword">int</span> f=<span class="number">0</span>,now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;j=cur[x];~j;j=nxt[j])</span><br><span class="line"><span class="keyword">if</span> (dis[x]+<span class="number">1</span>==dis[son[j]]&amp;&amp;(now=Dfs(son[j],gl,min(MIN,e[j].sc-e[j].fr))))&#123;</span><br><span class="line">f+=now;e[j].fr+=now;e[j^<span class="number">1</span>].fr-=now;</span><br><span class="line"><span class="keyword">if</span> (!(MIN-=now)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"program.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"program.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);E=<span class="number">0</span>;<span class="built_in">memset</span>(lnk,<span class="number">255</span>,<span class="keyword">sizeof</span>(lnk));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),Add(i,n+m+<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=m;i++,ans+=z)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z),Add(<span class="number">0</span>,n+i,z),Add(n+i,x,MAXINT),Add(n+i,y,MAXINT);</span><br><span class="line"><span class="keyword">while</span> (Bfs(<span class="number">0</span>,n+m+<span class="number">1</span>)) <span class="built_in">memcpy</span>(cur,lnk,<span class="keyword">sizeof</span>(lnk)),ans-=Dfs(<span class="number">0</span>,n+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目概述&quot;&gt;题目概述&lt;/h2&gt;
&lt;p&gt;有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个点 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 条边，每个点需要花费 &lt;span class=&quot;math inline&quot;&gt;\(p_i\)&lt;/span&gt; 购买，每条边可以得到 &lt;span class=&quot;math inline&quot;&gt;\(c_i\)&lt;/span&gt; 的价值。现在要购买一些点，如果一条边两端的点都被购买了，就可以得到这条边的价值。求最大价值。&lt;/p&gt;
    
    </summary>
    
      <category term="Online Judge" scheme="http://yoursite.com/categories/Online-Judge/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
</feed>
